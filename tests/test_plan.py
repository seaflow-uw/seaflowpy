import pandas as pd
import pytest
from seaflowpy import time
from seaflowpy import plan

# pylint: disable=redefined-outer-name

test_data = [
    (
        pd.DataFrame({
            "date": pd.to_datetime([
                "2023-09-12T00:00:00+00:00",
                "2023-09-12T01:00:00+00:00",
                "2023-09-12T02:00:00+00:00",
                "2023-09-12T03:00:00+00:00",
                "2023-09-12T04:00:00+00:00"
            ]),
            "id": ["a", "b", "c", "d", "e"]
        }),
        pd.DataFrame({
            "start_date": [
                "2023-09-12T00:00:00+00:00",
                "2023-09-12T01:00:00+00:00",
                "2023-09-12T02:00:00+00:00",
                "2023-09-12T03:00:00+00:00",
                "2023-09-12T04:00:00+00:00"
            ],
            "id": ["a", "b", "c", "d", "e"]
        })
    ),
    (
        pd.DataFrame({
            "date": pd.to_datetime([
                "2023-09-12T00:00:00+00:00",
                "2023-09-12T01:00:00+00:00",
                "2023-09-12T02:00:00+00:00",
                "2023-09-12T03:00:00+00:00",
                "2023-09-12T04:00:00+00:00"
            ]),
            "id": ["a", "a", "a", "a", "a"]
        }),
        pd.DataFrame({
            "start_date": ["2023-09-12T00:00:00+00:00"],
            "id": ["a"]
        })
    ),
    (
        pd.DataFrame({
            "date": pd.to_datetime([
                "2023-09-12T00:00:00+00:00",
                "2023-09-12T01:00:00+00:00",
                "2023-09-12T02:00:00+00:00",
                "2023-09-12T03:00:00+00:00",
                "2023-09-12T04:00:00+00:00"
            ]),
            "id": ["a", "b", "b", "b", "b"]
        }),
        pd.DataFrame({
            "start_date": [
                "2023-09-12T00:00:00+00:00",
                "2023-09-12T01:00:00+00:00"
            ],
            "id": ["a", "b"]
        })
    ),
    (
        pd.DataFrame({
            "date": pd.to_datetime([
                "2023-09-12T00:00:00+00:00",
                "2023-09-12T01:00:00+00:00",
                "2023-09-12T02:00:00+00:00",
                "2023-09-12T03:00:00+00:00",
                "2023-09-12T04:00:00+00:00"
            ]),
            "id": ["a", "a", "a", "a", "b"]
        }),
        pd.DataFrame({
            "start_date": [
                "2023-09-12T00:00:00+00:00",
                "2023-09-12T04:00:00+00:00"
            ],
            "id": ["a", "b"]
        })
    ),
    (
        pd.DataFrame({
            "date": pd.to_datetime([
                "2023-09-12T00:00:00+00:00",
                "2023-09-12T01:00:00+00:00",
                "2023-09-12T02:00:00+00:00",
                "2023-09-12T03:00:00+00:00",
                "2023-09-12T04:00:00+00:00"
            ]),
            "id": ["a", "a", "b", "b", "c"]
        }),
        pd.DataFrame({
            "start_date": [
                "2023-09-12T00:00:00+00:00",
                "2023-09-12T02:00:00+00:00",
                "2023-09-12T04:00:00+00:00"
            ],
            "id": ["a", "b", "c"]
        })
    ),
    (
        pd.DataFrame({
            "date": [
                "2023-09-12T00:00:00+00:00",
                "2023-09-12T01:00:00+00:00",
                "2023-09-12T02:00:00+00:00",
                "2023-09-12T03:00:00+00:00",
                "2023-09-12T04:00:00+00:00"
            ],
            "id": ["a", "a", "b", "b", "c"]
        }),
        pd.DataFrame({
            "start_date": [
                "2023-09-12T00:00:00+00:00",
                "2023-09-12T02:00:00+00:00",
                "2023-09-12T04:00:00+00:00"
            ],
            "id": ["a", "b", "c"]
        })
    )
]

@pytest.mark.parametrize("test_input, expected", test_data)
def test_condense_plan(test_input, expected):
    got = plan.condense_plan(test_input)
    assert got.equals(expected)
